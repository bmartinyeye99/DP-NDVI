    Epoch: One complete pass through the entire training dataset.

        For example, if your training dataset has 1,000 images and your batch size is 100, then one epoch consists
         of 10 iterations (1,000 / 100 = 10).

        In each iteration, a batch of data is passed through the model (forward pass), the loss is computed,
        and the model's weights are updated (backward pass).



    What Happens During One Epoch?

    During one epoch, the following steps occur:

        a. Training Phase

            Forward Pass:

                The model processes a batch of training data and makes predictions.

            Compute Loss:

                The loss (e.g., Mean Squared Error) is calculated by comparing the predictions to the ground truth.

            Backward Pass:

                Gradients of the loss with respect to the model's parameters are computed.

            Update Weights:

                The optimizer (e.g., Adam) updates the model's weights using the computed gradients.

            Repeat:

                Steps 1â€“4 are repeated for all batches in the training dataset.

        b. Validation Phase

        After the training phase for one epoch is complete, the model is evaluated on the validation dataset:

            Forward Pass:

                The model processes batches of validation data without updating its weights (no backward pass).

            Compute Validation Loss:

                The loss is calculated for the validation data to monitor the model's performance on unseen data.

            Log Metrics:

                Metrics like validation loss, accuracy, or regression plots are logged (e.g., using wandb).



# Training:

    #     The model is trained on the training data.
    #     The optimizer adjusts the model's weights to minimize the loss function.

    # Validation:
    #     After each epoch, the model is evaluated on the validation data.
    #     Validation metrics (e.g., loss, regression plots) are used to monitor performance and detect overfitting.

    # Testing:
    #     After training is complete, the model is evaluated on the test data.
    #     Test metrics provide an unbiased estimate of the model's performance on unseen data.